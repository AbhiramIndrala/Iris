
#Importing all the modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

#1.Taking the dataset
iris=pd.read_csv("https://raw.githubusercontent.com/ameenmanna8824/DATASETS/main/IRIS.csv")
iris

#2.Exploratory data analysis(EDA)
print(iris.columns)
print("\n")
(iris.info())#All the information about the dataset
print(iris.shape)#Shape of the dataset
print(iris.size)#Size of the dataset
print(iris.head())
print("\n")
print(iris["species"].nunique())#Number of species
print("\n")
print(iris.describe())
print("\n")
print(iris.groupby("species").size())#Total number of data contains each species

#3.Data Visualisation
sns.scatterplot(x="sepal_length",y="petal_length",data=iris,hue="species",size="species")
sns.scatterplot(x="sepal_width",y="petal_width",data=iris,hue="species",size="species",palette="rocket")
#Correlation between speal_length,sepal_width,peatal_length amd petal_width
sns.heatmap(iris.corr(),cbar=True,cmap="Greens",linewidth=0.4)
#Complete analysis of iris dataset
sns.pairplot(iris,hue="species",diag_kind="hist")
sns.boxplot(x="species",y="sepal_width",data=iris)


#4.Divide into input and output
#Input-sepal length,sepal width,petal length,petal width
#output-species in
x=iris.iloc[:,0:4].values
y=iris.iloc[:,4].values

#5.Train and Test the data
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0)
print(x.shape)#100%
print(x_train.shape)#75%
print(x_test.shape)#25%
print("\n")
print(y.shape)#100%
print(y_train.shape)#75%
print(y_test.shape)#25%

#6 Apply a classifier,regressor or clusterer
model=LogisticRegression()

#7. Fit the model(Mapping the values of x and y in the Logistic regression library)
model.fit(x_train,y_train)

#8.Predict the output
y_pred=model.predict(x_test)
print(y_pred)
print("\n")
print(y)
#Model Accuracy Scoring
accuracy_score(y_test,y_pred)*100



#Now using the K-NN algorithm
#Making the prediction of iris flower dataset
#1.Feature scaling
sc_x=StandardScaler()
XX_train=sc_x.fit_transform(x_train)
XX_test=sc_x.fit_transform(x_test)


#2.Creating K-NN Algorithm
knn=KNeighborsClassifier(n_neighbors=3)

#3. Fit the model(Mapping the values of x and y in the Logistic regression library)
knn.fit(XX_train,y_train)

#4.K-NN prediction Score
knn.score(XX_test,y_test)*100

#Predict the Output
y_pred=knn.predict(XX_test)
y_pred

#Confusion matrix
cm=confusion_matrix(y_test,y_pred)
cm

#Classification report
print(classification_report(y_test,y_pred))

#Accuracy Score
accuracy_score(y_pred,y_test)*100

#Individual prediction using LogisticRegression
print(model.predict([[5.1,3.5,1.4,0.2]]))
#Giving the random accuracy score
print(model.predict([[6.1,2.1,6.3,5.9]]))
print(model.predict([[4.9,2.4,3.3,1,]]))
